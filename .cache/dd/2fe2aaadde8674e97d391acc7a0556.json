{"id":"node_modules/data.task/lib/task.js","dependencies":[{"name":"/Users/bblake/workspace/explorations/mithril/charts/package.json","includedInParent":true,"mtime":1561838101790},{"name":"/Users/bblake/workspace/explorations/mithril/charts/node_modules/data.task/package.json","includedInParent":true,"mtime":1551892789578},{"name":"process","parent":"/Users/bblake/workspace/explorations/mithril/charts/node_modules/data.task/lib/task.js","resolved":"/Users/bblake/.config/yarn/global/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\n\n/**\n * A helper for delaying the execution of a function.\n * @private\n * @summary (Any... -> Any) -> Void\n */\nvar delayed = typeof setImmediate !== 'undefined'?  setImmediate\n            : typeof process !== 'undefined'?       process.nextTick\n            : /* otherwise */                       setTimeout\n\n/**\n * @module lib/task\n */\nmodule.exports = Task;\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * The `Task[α, β]` structure represents values that depend on time. This\n * allows one to model time-based effects explicitly, such that one can have\n * full knowledge of when they're dealing with delayed computations, latency,\n * or anything that can not be computed immediately.\n *\n * A common use for this structure is to replace the usual Continuation-Passing\n * Style form of programming, in order to be able to compose and sequence\n * time-dependent effects using the generic and powerful monadic operations.\n *\n * @class\n * @summary\n * ((α → Void), (β → Void) → Void), (Void → Void) → Task[α, β]\n *\n * Task[α, β] <: Chain[β]\n *               , Monad[β]\n *               , Functor[β]\n *               , Applicative[β]\n *               , Semigroup[β]\n *               , Monoid[β]\n *               , Show\n */\nfunction Task(computation, cleanup) {\n  this.fork = computation;\n\n  this.cleanup = cleanup || function() {};\n}\n\n/**\n * Constructs a new `Task[α, β]` containing the single value `β`.\n *\n * `β` can be any value, including `null`, `undefined`, or another\n * `Task[α, β]` structure.\n *\n * @summary β → Task[α, β]\n */\nTask.prototype.of = function _of(b) {\n  return new Task(function(_, resolve) {\n    return resolve(b);\n  });\n};\n\nTask.of = Task.prototype.of;\n\n/**\n * Constructs a new `Task[α, β]` containing the single value `α`.\n *\n * `α` can be any value, including `null`, `undefined`, or another\n * `Task[α, β]` structure.\n *\n * @summary α → Task[α, β]\n */\nTask.prototype.rejected = function _rejected(a) {\n  return new Task(function(reject) {\n    return reject(a);\n  });\n};\n\nTask.rejected = Task.prototype.rejected;\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the successful value of the `Task[α, β]` using a regular unary\n * function.\n *\n * @summary @Task[α, β] => (β → γ) → Task[α, γ]\n */\nTask.prototype.map = function _map(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(a);\n    }, function(b) {\n      return resolve(f(b));\n    });\n  }, cleanup);\n};\n\n// -- Chain ------------------------------------------------------------\n\n/**\n * Transforms the succesful value of the `Task[α, β]` using a function to a\n * monad.\n *\n * @summary @Task[α, β] => (β → Task[α, γ]) → Task[α, γ]\n */\nTask.prototype.chain = function _chain(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(a);\n    }, function(b) {\n      return f(b).fork(reject, resolve);\n    });\n  }, cleanup);\n};\n\n// -- Apply ------------------------------------------------------------\n\n/**\n * Applys the successful value of the `Task[α, (β → γ)]` to the successful\n * value of the `Task[α, β]`\n *\n * @summary @Task[α, (β → γ)] => Task[α, β] → Task[α, γ]\n */\n\nTask.prototype.ap = function _ap(that) {\n  var forkThis = this.fork;\n  var forkThat = that.fork;\n  var cleanupThis = this.cleanup;\n  var cleanupThat = that.cleanup;\n\n  function cleanupBoth(state) {\n    cleanupThis(state[0]);\n    cleanupThat(state[1]);\n  }\n\n  return new Task(function(reject, resolve) {\n    var func, funcLoaded = false;\n    var val, valLoaded = false;\n    var rejected = false;\n    var allState;\n\n    var thisState = forkThis(guardReject, guardResolve(function(x) {\n      funcLoaded = true;\n      func = x;\n    }));\n\n    var thatState = forkThat(guardReject, guardResolve(function(x) {\n      valLoaded = true;\n      val = x;\n    }));\n\n    function guardResolve(setter) {\n      return function(x) {\n        if (rejected) {\n          return;\n        }\n\n        setter(x);\n        if (funcLoaded && valLoaded) {\n          delayed(function(){ cleanupBoth(allState) });\n          return resolve(func(val));\n        } else {\n          return x;\n        }\n      }\n    }\n\n    function guardReject(x) {\n      if (!rejected) {\n        rejected = true;\n        return reject(x);\n      }\n    }\n\n    return allState = [thisState, thatState];\n  }, cleanupBoth);\n};\n\n// -- Semigroup ------------------------------------------------------------\n\n/**\n * Selects the earlier of the two tasks `Task[α, β]`\n *\n * @summary @Task[α, β] => Task[α, β] → Task[α, β]\n */\n\nTask.prototype.concat = function _concat(that) {\n  var forkThis = this.fork;\n  var forkThat = that.fork;\n  var cleanupThis = this.cleanup;\n  var cleanupThat = that.cleanup;\n\n  function cleanupBoth(state) {\n    cleanupThis(state[0]);\n    cleanupThat(state[1]);\n  }\n\n  return new Task(function(reject, resolve) {\n    var done = false;\n    var allState;\n    var thisState = forkThis(guard(reject), guard(resolve));\n    var thatState = forkThat(guard(reject), guard(resolve));\n\n    return allState = [thisState, thatState];\n\n    function guard(f) {\n      return function(x) {\n        if (!done) {\n          done = true;\n          delayed(function(){ cleanupBoth(allState) })\n          return f(x);\n        }\n      };\n    }\n  }, cleanupBoth);\n\n};\n\n// -- Monoid ------------------------------------------------------------\n\n/**\n * Returns a Task that will never resolve\n *\n * @summary Void → Task[α, _]\n */\nTask.empty = function _empty() {\n  return new Task(function() {});\n};\n\nTask.prototype.empty = Task.empty;\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Task[α, β]`\n *\n * @summary @Task[α, β] => Void → String\n */\nTask.prototype.toString = function _toString() {\n  return 'Task';\n};\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Transforms a failure value into a new `Task[α, β]`. Does nothing if the\n * structure already contains a successful value.\n *\n * @summary @Task[α, β] => (α → Task[γ, β]) → Task[γ, β]\n */\nTask.prototype.orElse = function _orElse(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return f(a).fork(reject, resolve);\n    }, function(b) {\n      return resolve(b);\n    });\n  }, cleanup);\n};\n\n// -- Folds and extended transformations -------------------------------\n\n/**\n * Catamorphism. Takes two functions, applies the leftmost one to the failure\n * value, and the rightmost one to the successful value, depending on which one\n * is present.\n *\n * @summary @Task[α, β] => (α → γ), (β → γ) → Task[δ, γ]\n */\nTask.prototype.fold = function _fold(f, g) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return resolve(f(a));\n    }, function(b) {\n      return resolve(g(b));\n    });\n  }, cleanup);\n};\n\n/**\n * Catamorphism.\n *\n * @summary @Task[α, β] => { Rejected: α → γ, Resolved: β → γ } → Task[δ, γ]\n */\nTask.prototype.cata = function _cata(pattern) {\n  return this.fold(pattern.Rejected, pattern.Resolved);\n};\n\n/**\n * Swaps the disjunction values.\n *\n * @summary @Task[α, β] => Void → Task[β, α]\n */\nTask.prototype.swap = function _swap() {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return resolve(a);\n    }, function(b) {\n      return reject(b);\n    });\n  }, cleanup);\n};\n\n/**\n * Maps both sides of the disjunction.\n *\n * @summary @Task[α, β] => (α → γ), (β → δ) → Task[γ, δ]\n */\nTask.prototype.bimap = function _bimap(f, g) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(f(a));\n    }, function(b) {\n      return resolve(g(b));\n    });\n  }, cleanup);\n};\n\n/**\n * Maps the left side of the disjunction (failure).\n *\n * @summary @Task[α, β] => (α → γ) → Task[γ, β]\n */\nTask.prototype.rejectedMap = function _rejectedMap(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(f(a));\n    }, function(b) {\n      return resolve(b);\n    });\n  }, cleanup);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/data.task/lib/task.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/data.task/lib/task.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}}],"sources":{"node_modules/data.task/lib/task.js":"'use strict';\n\n\n/**\n * A helper for delaying the execution of a function.\n * @private\n * @summary (Any... -> Any) -> Void\n */\nvar delayed = typeof setImmediate !== 'undefined'?  setImmediate\n            : typeof process !== 'undefined'?       process.nextTick\n            : /* otherwise */                       setTimeout\n\n/**\n * @module lib/task\n */\nmodule.exports = Task;\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * The `Task[α, β]` structure represents values that depend on time. This\n * allows one to model time-based effects explicitly, such that one can have\n * full knowledge of when they're dealing with delayed computations, latency,\n * or anything that can not be computed immediately.\n *\n * A common use for this structure is to replace the usual Continuation-Passing\n * Style form of programming, in order to be able to compose and sequence\n * time-dependent effects using the generic and powerful monadic operations.\n *\n * @class\n * @summary\n * ((α → Void), (β → Void) → Void), (Void → Void) → Task[α, β]\n *\n * Task[α, β] <: Chain[β]\n *               , Monad[β]\n *               , Functor[β]\n *               , Applicative[β]\n *               , Semigroup[β]\n *               , Monoid[β]\n *               , Show\n */\nfunction Task(computation, cleanup) {\n  this.fork = computation;\n\n  this.cleanup = cleanup || function() {};\n}\n\n/**\n * Constructs a new `Task[α, β]` containing the single value `β`.\n *\n * `β` can be any value, including `null`, `undefined`, or another\n * `Task[α, β]` structure.\n *\n * @summary β → Task[α, β]\n */\nTask.prototype.of = function _of(b) {\n  return new Task(function(_, resolve) {\n    return resolve(b);\n  });\n};\n\nTask.of = Task.prototype.of;\n\n/**\n * Constructs a new `Task[α, β]` containing the single value `α`.\n *\n * `α` can be any value, including `null`, `undefined`, or another\n * `Task[α, β]` structure.\n *\n * @summary α → Task[α, β]\n */\nTask.prototype.rejected = function _rejected(a) {\n  return new Task(function(reject) {\n    return reject(a);\n  });\n};\n\nTask.rejected = Task.prototype.rejected;\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the successful value of the `Task[α, β]` using a regular unary\n * function.\n *\n * @summary @Task[α, β] => (β → γ) → Task[α, γ]\n */\nTask.prototype.map = function _map(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(a);\n    }, function(b) {\n      return resolve(f(b));\n    });\n  }, cleanup);\n};\n\n// -- Chain ------------------------------------------------------------\n\n/**\n * Transforms the succesful value of the `Task[α, β]` using a function to a\n * monad.\n *\n * @summary @Task[α, β] => (β → Task[α, γ]) → Task[α, γ]\n */\nTask.prototype.chain = function _chain(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(a);\n    }, function(b) {\n      return f(b).fork(reject, resolve);\n    });\n  }, cleanup);\n};\n\n// -- Apply ------------------------------------------------------------\n\n/**\n * Applys the successful value of the `Task[α, (β → γ)]` to the successful\n * value of the `Task[α, β]`\n *\n * @summary @Task[α, (β → γ)] => Task[α, β] → Task[α, γ]\n */\n\nTask.prototype.ap = function _ap(that) {\n  var forkThis = this.fork;\n  var forkThat = that.fork;\n  var cleanupThis = this.cleanup;\n  var cleanupThat = that.cleanup;\n\n  function cleanupBoth(state) {\n    cleanupThis(state[0]);\n    cleanupThat(state[1]);\n  }\n\n  return new Task(function(reject, resolve) {\n    var func, funcLoaded = false;\n    var val, valLoaded = false;\n    var rejected = false;\n    var allState;\n\n    var thisState = forkThis(guardReject, guardResolve(function(x) {\n      funcLoaded = true;\n      func = x;\n    }));\n\n    var thatState = forkThat(guardReject, guardResolve(function(x) {\n      valLoaded = true;\n      val = x;\n    }));\n\n    function guardResolve(setter) {\n      return function(x) {\n        if (rejected) {\n          return;\n        }\n\n        setter(x);\n        if (funcLoaded && valLoaded) {\n          delayed(function(){ cleanupBoth(allState) });\n          return resolve(func(val));\n        } else {\n          return x;\n        }\n      }\n    }\n\n    function guardReject(x) {\n      if (!rejected) {\n        rejected = true;\n        return reject(x);\n      }\n    }\n\n    return allState = [thisState, thatState];\n  }, cleanupBoth);\n};\n\n// -- Semigroup ------------------------------------------------------------\n\n/**\n * Selects the earlier of the two tasks `Task[α, β]`\n *\n * @summary @Task[α, β] => Task[α, β] → Task[α, β]\n */\n\nTask.prototype.concat = function _concat(that) {\n  var forkThis = this.fork;\n  var forkThat = that.fork;\n  var cleanupThis = this.cleanup;\n  var cleanupThat = that.cleanup;\n\n  function cleanupBoth(state) {\n    cleanupThis(state[0]);\n    cleanupThat(state[1]);\n  }\n\n  return new Task(function(reject, resolve) {\n    var done = false;\n    var allState;\n    var thisState = forkThis(guard(reject), guard(resolve));\n    var thatState = forkThat(guard(reject), guard(resolve));\n\n    return allState = [thisState, thatState];\n\n    function guard(f) {\n      return function(x) {\n        if (!done) {\n          done = true;\n          delayed(function(){ cleanupBoth(allState) })\n          return f(x);\n        }\n      };\n    }\n  }, cleanupBoth);\n\n};\n\n// -- Monoid ------------------------------------------------------------\n\n/**\n * Returns a Task that will never resolve\n *\n * @summary Void → Task[α, _]\n */\nTask.empty = function _empty() {\n  return new Task(function() {});\n};\n\nTask.prototype.empty = Task.empty;\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Task[α, β]`\n *\n * @summary @Task[α, β] => Void → String\n */\nTask.prototype.toString = function _toString() {\n  return 'Task';\n};\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Transforms a failure value into a new `Task[α, β]`. Does nothing if the\n * structure already contains a successful value.\n *\n * @summary @Task[α, β] => (α → Task[γ, β]) → Task[γ, β]\n */\nTask.prototype.orElse = function _orElse(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return f(a).fork(reject, resolve);\n    }, function(b) {\n      return resolve(b);\n    });\n  }, cleanup);\n};\n\n// -- Folds and extended transformations -------------------------------\n\n/**\n * Catamorphism. Takes two functions, applies the leftmost one to the failure\n * value, and the rightmost one to the successful value, depending on which one\n * is present.\n *\n * @summary @Task[α, β] => (α → γ), (β → γ) → Task[δ, γ]\n */\nTask.prototype.fold = function _fold(f, g) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return resolve(f(a));\n    }, function(b) {\n      return resolve(g(b));\n    });\n  }, cleanup);\n};\n\n/**\n * Catamorphism.\n *\n * @summary @Task[α, β] => { Rejected: α → γ, Resolved: β → γ } → Task[δ, γ]\n */\nTask.prototype.cata = function _cata(pattern) {\n  return this.fold(pattern.Rejected, pattern.Resolved);\n};\n\n/**\n * Swaps the disjunction values.\n *\n * @summary @Task[α, β] => Void → Task[β, α]\n */\nTask.prototype.swap = function _swap() {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return resolve(a);\n    }, function(b) {\n      return reject(b);\n    });\n  }, cleanup);\n};\n\n/**\n * Maps both sides of the disjunction.\n *\n * @summary @Task[α, β] => (α → γ), (β → δ) → Task[γ, δ]\n */\nTask.prototype.bimap = function _bimap(f, g) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(f(a));\n    }, function(b) {\n      return resolve(g(b));\n    });\n  }, cleanup);\n};\n\n/**\n * Maps the left side of the disjunction (failure).\n *\n * @summary @Task[α, β] => (α → γ) → Task[γ, β]\n */\nTask.prototype.rejectedMap = function _rejectedMap(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(f(a));\n    }, function(b) {\n      return resolve(b);\n    });\n  }, cleanup);\n};\n"},"lineCount":355}},"error":null,"hash":"5c114dce730c431ad62a31b72990577d","cacheData":{"env":{}}}